import Head from "next/head";
import { ethers } from "ethers";
import { useContext, useEffect, useState, useRef } from "react";
import Contracts from "../contexts/contracts";
import BetSizeModal from "../components/BetSizeModal";
import MatchesModal from "../components/MatchesModal";
import { connectWallet } from "../lib/functions";
import OwnedGotchiModal from "../components/OwnedGotchiModal";
import { register } from "../lib/functions";
import { DIAMOND_FORKED_MAINNET_CONTRACT } from "../lib/constants";

export default function Home() {
  const {
    currentAccount,
    mainContract,
    daiContract,
    connected,
    setConnected,
    setProvider,
    setMatchId,
    playerMatchesId,
    betSize,
    setBetSize,
    setCurrentAccount,
    playerIdsToSvgs,
    playerAllGotchiParams,
  } = useContext(Contracts);

  const audioRef = useRef();

  const [showSizes, setShowSizes] = useState(false);
  const [showMatches, setShowMatches] = useState(false);
  const [showOwned, setShowOwned] = useState(false);
  const [tokenIds, setTokenIds] = useState([]);
  const [playing, setPlaying] = useState(false);

  const audio = "/brand/audio/landing.wav";

  const approve = async () => {
    await daiContract.approve(
      DIAMOND_FORKED_MAINNET_CONTRACT,
      ethers.utils.parseUnits("100000000000000000000000000", "ether")
    );
  };

  useEffect(() => {
    if (betSize && tokenIds.length === 5 && mainContract) {
      register(mainContract, betSize, tokenIds);
    }
  }, [betSize, tokenIds, mainContract]);

  useEffect(() => {
    playing ? audioRef.current.play() : audioRef.current.pause();
  }, [playing]);

  return (
    <div>
      <Head>
        <title>Aavegotchi Triad</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-mainBg bg-cover h-screen flex flex-col justify-around items-center text-white">
        <div className="font-alagard text-8xl h-1/6">Aavegotchi Triad</div>
        <div className="flex flex-col items-center justify-between h-1/3 gap-10 font-pixel text-3xl">
          <div
            onClick={() => setShowSizes(!showSizes)}
            className="nes-pointer hover:text-brand-pink"
          >
            Create New Match
          </div>
          <div
            onClick={() => setShowMatches(!showMatches)}
            className="nes-pointer hover:text-brand-pink"
          >
            Check Your Matches
          </div>
          <div
            onClick={() => setShowOwned(!showOwned)}
            className="nes-pointer hover:text-brand-pink"
          >
            Check Your Aavegotchis
          </div>
          <div className="nes-pointer hover:text-brand-pink">Options</div>
        </div>
        <div className="w-full h-1/6 flex items-center justify-around">
          <button
            onClick={
              connected
                ? () => approve()
                : () =>
                    connectWallet(setConnected, setCurrentAccount, setProvider)
            }
            className="w-1/4 capitalize font-pixel text-base text-white bg-brand-pink rounded-2xl py-4 hover:opacity-90"
          >
            {connected
              ? currentAccount.substring(0, 5) +
                ".." +
                currentAccount.substring(39)
              : "connect wallet"}
          </button>
          <div>
            <audio
              controls="controls"
              preload="auto"
              autobuffer="true"
              style={{ display: "none" }}
              ref={audioRef}
              loop={true}
            >
              <source src={audio} />
            </audio>

            <button onClick={() => setPlaying(!playing)}>Play</button>
          </div>
        </div>
      </div>
      <BetSizeModal
        setBetSize={setBetSize}
        showSizes={showSizes}
        setShowSizes={setShowSizes}
      />
      <MatchesModal
        setMatchId={setMatchId}
        showMatches={showMatches}
        setShowMatches={setShowMatches}
        playerMatchesId={playerMatchesId}
      />
      {showOwned && (
        <OwnedGotchiModal
          playerGotchis={playerIdsToSvgs}
          playerParams={playerAllGotchiParams}
          showOwned={showOwned}
          setShowOwned={setShowOwned}
          setTokenIds={setTokenIds}
        />
      )}
    </div>
  );
}
