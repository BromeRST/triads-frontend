import Head from "next/head";
import { useContext, useEffect, useState } from "react";
import BottomBar from "../../../components/match/BottomBar";
import Grid from "../../../components/match/Grid";
import PlayerSide from "../../../components/match/PlayerSide";
import Contracts from "../../../contexts/contracts";
import { tokenSvgsOfPlayer1, tokenSvgsOfPlayer2 } from "../../../lib/functions";

export default function App() {
  const { mainContract, aavegotchiContract, matchId } = useContext(Contracts);

  const [match, setMatch] = useState(null);
  const [player1Params, setPlayer1Params] = useState([]);
  const [player1Gotchis, setPlayer1Gotchis] = useState([]);
  const [player2Params, setPlayer2Params] = useState([]);
  const [player2Gotchis, setPlayer2Gotchis] = useState([]);
  const [gridMap, setGridMap] = useState(null);
  const [xToPlay, setXToPlay] = useState(null);
  const [yToPlay, setYToPlay] = useState(null);
  const [tokenId, setTokenId] = useState(null);
  const [p1Points, setP1Points] = useState(5);
  const [p2Points, setP2Points] = useState(5);
  const [resetMatch, setResetMatch] = useState(false);
  const [checkedMatchId, setCheckedMatchId] = useState(false);

  const getMatch = async () => {
    /*     setCheckedWinner(false); */
    const m = await mainContract.getMatch(matchId);
    setMatch(m);
    /*     if (m.winner !== "0x0000000000000000000000000000000000000000") {
      setCheckedWinner(true);
      setWinner(
        m.winner.substring(0,6) +
        "..." + 
        m.winner.substring(36));
    }
    if (m.movsCounter === 9 && m.winner === "0x0000000000000000000000000000000000000000") {
      setCheckedWinner(true);
      setWinner("DRAW")
    } */
  };

  const checkPoints = () => {
    let player1Points = 0;
    let player2Points = 0;
    for (let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        if (gridMap[i][j].winner == match.player1) {
          player1Points++;
        } else if (gridMap[i][j].winner == match.player2) {
          player2Points++;
        }
      }
    }
    console.log(player2Points + player2Gotchis.length);
    setP1Points(player1Gotchis.length + player1Points);
    setP2Points(player2Gotchis.length + player2Points);
  };

  const getGrid = async () => {
    const grid = await mainContract.getGrid(matchId);
    setGridMap(grid);
  };

  const resetGridMatch = () => {
    setPlayer1Params([]);
    setPlayer2Params([]);
    setPlayer1Gotchis([]);
    setPlayer2Gotchis([]);
    setResetMatch(true);
  };

  useEffect(() => {
    if (matchId !== null) {
      setPlayer1Params([]);
      setPlayer2Params([]);
      setPlayer1Gotchis([]);
      setPlayer2Gotchis([]);
      setCheckedMatchId(true);
    }
  }, [matchId]);

  useEffect(() => {
    if (checkedMatchId || resetMatch) {
      getMatch();
      getGrid();
      setCheckedMatchId(false);
      setResetMatch(false);
    }
  }, [checkedMatchId, resetMatch]);

  useEffect(() => {
    if (match) {
      tokenSvgsOfPlayer1(
        match,
        aavegotchiContract,
        setPlayer1Params,
        setPlayer1Gotchis
      );
      tokenSvgsOfPlayer2(
        match,
        aavegotchiContract,
        setPlayer2Params,
        setPlayer2Gotchis
      );
    }
  }, [match]);

  useEffect(() => {
    if (matchId !== null) {
      const CARD_FILTER = mainContract.filters.CardPlayed(matchId);
      mainContract.on(CARD_FILTER, () => {
        resetGridMatch();
      });
    }
  }, [matchId]);

  useEffect(() => {
    if (match && gridMap) {
      checkPoints();
    }
  }, [match, gridMap, player1Gotchis, player2Gotchis]);

  return (
    <div>
      <Head>
        <title>Aavegotchi Triad</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex justify-around py-8 font-pixel bg-mainBg bg-cover h-screen">
        <div className="w-1/4">
          <PlayerSide
            player={["player1", match?.player1]}
            playerGotchis={player1Gotchis}
            playerParams={player1Params}
            setTokenId={setTokenId}
            points={p1Points}
          />
        </div>
        <div className="w-2/5">
          {gridMap && (
            <Grid
              gridMap={gridMap}
              match={match}
              setXToPlay={setXToPlay}
              setYToPlay={setYToPlay}
              matchId={matchId}
            />
          )}
        </div>
        <div className="w-1/4">
          <PlayerSide
            player={["player2", match?.player2]}
            playerGotchis={player2Gotchis}
            playerParams={player2Params}
            setTokenId={setTokenId}
            points={p2Points}
          />
        </div>
      </div>
      <div className="font-pixel">
        <BottomBar
          matchId={matchId}
          tokenId={tokenId}
          xToPlay={xToPlay}
          yToPlay={yToPlay}
        />
      </div>
    </div>
  );
}
